import{_ as s,o as i,c as a,R as t,a7 as n,a8 as l,a9 as p}from"./chunks/framework.EjZ06QX2.js";const F=JSON.parse('{"title":"节点开发","description":"","frontmatter":{},"headers":[],"relativePath":"node-design/node-design.md","filePath":"node-design/node-design.md"}'),h={name:"node-design/node-design.md"},e=t('<h1 id="节点开发" tabindex="-1">节点开发 <a class="header-anchor" href="#节点开发" aria-label="Permalink to &quot;节点开发&quot;">​</a></h1><p>节点的设计流程为：</p><ol><li>新建节点</li><li>配置节点输入、输出参数</li><li>编写节点js或python函数(可选)</li><li>编写节点vue代码(可选)</li></ol><p>节点的输入参数对应着节点的输入端口，节点的输出参数则对应节点的输出端口 节点执行阶段会优先调用vue代码内的methods内的func函数，若不存在func函数，则会调用<strong>函数编写</strong>面板的js或python函数来执行。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>若是使用pyfineflow的后端节点，则无需编写func函数，它会默认使用pyfineflow的node装饰的函数。</p></div><p>节点编辑面板介绍： <img src="'+n+'" alt="node_editor"></p><h2 id="参数设置" tabindex="-1">参数设置 <a class="header-anchor" href="#参数设置" aria-label="Permalink to &quot;参数设置&quot;">​</a></h2><div style="justify-content:center;display:flex;"><img src="'+l+'" width="500"></div><p>在节点编辑面板左侧参数配置面板，可以添加配置指定类型的节点参数。 参数配置项包括：</p><table><thead><tr><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>键值</td><td>该参数在函数中的变量名,不能重复,需符合变量名命名规范</td></tr><tr><td>名称</td><td>参数名称</td></tr><tr><td>类型</td><td>参数类型</td></tr><tr><td>描述</td><td>参数的描述信息</td></tr></tbody></table><p>其中参数类型包括基本数据类型，如</p><ul><li>字符串</li><li>整数</li><li>浮点数</li><li>枚举</li><li>布尔值</li></ul><p>和两个特殊类型</p><ul><li><strong>any类型</strong></li></ul><p>该类型可以连接任意类型的参数</p><ul><li><strong>custom类型</strong></li></ul><p>custom类型为自定义类型，用户可以自定义类型名称，若输入输出参数的custom定义的类型名称相同则可以连接。</p><h2 id="编写节点函数" tabindex="-1">编写节点函数 <a class="header-anchor" href="#编写节点函数" aria-label="Permalink to &quot;编写节点函数&quot;">​</a></h2><p>在节点编辑面板的函数编辑面板可编辑节点函数</p><div style="justify-content:center;display:flex;"><img src="'+p+`" width="500"></div><p>函数的输入参数params,其值为输入参数键值和值组成的字典,例如:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;paramKey1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;paramKey2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>函数的返回值也应为输出参数值字典:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;returnKey1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;returnKey2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>输出参数若某一个值为undefined,那么它不会进行该参数所连接的后续输入进行触发。</p><p>同样的返回参数字典若不存在某一个键值，那么它也不会对该参数所连接的后续输入进行触发</p></div><h2 id="使用vue设计节点" tabindex="-1">使用vue设计节点 <a class="header-anchor" href="#使用vue设计节点" aria-label="Permalink to &quot;使用vue设计节点&quot;">​</a></h2><p>使用vue编辑节点代码和编写vue组件类似，但有一些限制。</p><p><strong>节点的vue限制:</strong></p><ol><li>vue代码只能使用选项式语法编写</li><li>分别只能有一个template块、script块、style块</li><li>不能使用import</li></ol><h3 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inputs.url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inputs.url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;inputs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;outputs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userInputs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;serverStates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  emits:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;update:input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {msg:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods:{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // func(params){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //     return params</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">white</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>代码中props、emits、还有methods中有一些预置的定义，具体含义如下表所示：</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td>props-&gt;inputs</td><td>节点综合输入参数字典(只读)</td></tr><tr><td>props-&gt;outputs</td><td>节点综合输出参数字典(只读)</td></tr><tr><td>props-&gt;userInputs</td><td>节点用户手动输入参数字典(只读)</td></tr><tr><td>props-&gt;serverStates</td><td>后端传递的状态信息(只读)</td></tr><tr><td>emits-&gt;update:input</td><td>更新用户输入参数的事件,使用方法:emits(&#39;update:input&#39;,key,value)</td></tr><tr><td>methods-&gt;func</td><td>若该方法存在则节点执行时会优先执行该函数，编写方法和节点js函数一样，可使用async</td></tr></tbody></table>`,33),k=[e];function E(d,r,o,g,y,u){return i(),a("div",null,k)}const m=s(h,[["render",E]]);export{F as __pageData,m as default};
